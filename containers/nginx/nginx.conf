# Nginxがリバースプロキシとして動作し、クライアントからのリクエストを受け取り、それをアプリケーションサーバーに転送
upstream app {
  # Unixソケット通信で、appコンテナのpuma.sockファイルに転送を行っている
  server unix:///app/tmp/sockets/puma.sock;
}

server {
  # localhost:80でHTTPリクエストを受け付ける
  listen 80;
  server_name localhost;

  access_log /var/log/nginx/access.log;
  error_log  /var/log/nginx/error.log;

  # Nginxが静的ファイルを提供する際の基準となるディレクトリ
  # 例えば、root /app/public;というディレクティブがあれば、/app/publicディレクトリ内のファイルが提供される
  root /app/public;

  client_max_body_size 100m;
  error_page 404             /404.html;
  error_page 505 502 503 504 /500.html;
  
  # Nginxがファイルを検索する順序を指定します。まず、リクエストされたURIに対応するindex.htmlがあるかどうかを検索し、見つからない場合は@app(後述)という名前のロケーションブロックに処理を委譲
  try_files  $uri/index.html $uri @app;

  keepalive_timeout 5;

  # 動的なコンテンツやバックエンドアプリケーションへのリクエストを処理するために使用
  location @app {
    # バックエンドサーバーに転送されるリクエストヘッダーの中で、X-Real-IPという名前のヘッダーにリクエストの送信元IPアドレスを設定 → バックエンドサーバーはリクエスト元のIPアドレスを知れる
    proxy_set_header X-Real-IP $remote_addr;
    # バックエンドサーバーに転送されるリクエストヘッダーの中で、X-Forwarded-Forという名前のヘッダーにリクエストの送信元IPアドレスを追加 → リクエストがどのような経路を経てバックエンドサーバーに到達したかを知れる
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    # バックエンドサーバーに転送されるリクエストヘッダーの中で、Hostという名前のヘッダーにリクエストのホスト名を設定 → バックエンドサーバーは正しいホストに対するリクエストであることを判断できる
    proxy_set_header Host $http_host;
    # appコンテナ(バックエンドサーバー)に送信
    proxy_pass http://app;
  }
}
